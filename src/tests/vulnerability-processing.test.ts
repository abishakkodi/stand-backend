import { rulesEngine } from '../services/rules-engine.js';
import { supabaseAdmin } from '../config/supabase.js';
import { v4 as uuidv4 } from 'uuid';

interface AssessmentObservation {
  id: string;
  observation_type_id: string;
  observation_value_id: string | null;
  value?: string | number | boolean;
}

describe('Vulnerability Processing', () => {
  beforeEach(async () => {
    // Clean up existing data
    await supabaseAdmin.from('vulnerabilities').delete().neq('id', 0);
    await supabaseAdmin.from('rules').delete().neq('id', 0);
    await supabaseAdmin.from('observation_values').delete().neq('id', 0);
    await supabaseAdmin.from('observation_types').delete().neq('id', 0);
    await supabaseAdmin.from('properties').delete().neq('id', 0);
  });

  it('should create vulnerability when rule conditions are met', async () => {
    // Create test property
    const { data: property } = await supabaseAdmin
      .from('properties')
      .insert({ name: 'Test Property' })
      .select()
      .single();
    if (!property) throw new Error('Failed to create property');

    // Create window type observation type
    const { data: windowType } = await supabaseAdmin
      .from('observation_types')
      .insert({ name: 'Window Type', value_type: 'string' })
      .select()
      .single();
    if (!windowType) throw new Error('Failed to create window type');

    // Create single-pane window value
    const { data: singlePane } = await supabaseAdmin
      .from('observation_values')
      .insert({ observation_type_id: windowType.id, value: 'single-pane' })
      .select()
      .single();
    if (!singlePane) throw new Error('Failed to create single pane value');

    // Create rule for single-pane windows
    const { data: rule } = await supabaseAdmin
      .from('rules')
      .insert({
        name: 'Single Pane Window Rule',
        description: 'Identifies properties with single-pane windows',
        functional_rule: {
          join_operator: 'AND',
          conditions: [{
            observation_type_id: windowType.id,
            observation_value_ids: [singlePane.id],
            operator: 'EQUALS'
          }]
        }
      })
      .select()
      .single();
    if (!rule) throw new Error('Failed to create rule');

    // Create assessment with single-pane window observation
    const assessment = {
      id: uuidv4(),
      property_id: property.id,
      observations: [{
        observation_type_id: windowType.id,
        observation_value_id: singlePane.id
      }]
    };

    await rulesEngine.processAssessment(assessment);

    // Verify vulnerability was created
    const { data: vulnerabilities } = await supabaseAdmin
      .from('vulnerabilities')
      .select()
      .eq('rule_id', rule.id);

    expect(vulnerabilities).toHaveLength(1);
    expect(vulnerabilities![0].property_id).toBe(property.id);
  });

  it('should not create vulnerability when rule conditions are not met', async () => {
    // Create test property
    const { data: property } = await supabaseAdmin
      .from('properties')
      .insert({ name: 'Test Property' })
      .select()
      .single();
    if (!property) throw new Error('Failed to create property');

    // Create window type observation type
    const { data: windowType } = await supabaseAdmin
      .from('observation_types')
      .insert({ name: 'Window Type', value_type: 'string' })
      .select()
      .single();
    if (!windowType) throw new Error('Failed to create window type');

    // Create single-pane window value
    const { data: singlePane } = await supabaseAdmin
      .from('observation_values')
      .insert({ observation_type_id: windowType.id, value: 'single-pane' })
      .select()
      .single();
    if (!singlePane) throw new Error('Failed to create single pane value');

    // Create tempered glass window value
    const { data: temperedGlass } = await supabaseAdmin
      .from('observation_values')
      .insert({ observation_type_id: windowType.id, value: 'tempered-glass' })
      .select()
      .single();
    if (!temperedGlass) throw new Error('Failed to create tempered glass value');

    // Create rule for single-pane windows
    const { data: rule } = await supabaseAdmin
      .from('rules')
      .insert({
        name: 'Single Pane Window Rule',
        description: 'Identifies properties with single-pane windows',
        functional_rule: {
          join_operator: 'AND',
          conditions: [{
            observation_type_id: windowType.id,
            observation_value_ids: [singlePane.id],
            operator: 'EQUALS'
          }]
        }
      })
      .select()
      .single();
    if (!rule) throw new Error('Failed to create rule');

    // Create assessment with tempered glass window observation
    const assessment = {
      id: uuidv4(),
      property_id: property.id,
      observations: [{
        observation_type_id: windowType.id,
        observation_value_id: temperedGlass.id
      }]
    };

    await rulesEngine.processAssessment(assessment);

    // Verify no vulnerability was created
    const { data: vulnerabilities } = await supabaseAdmin
      .from('vulnerabilities')
      .select()
      .eq('rule_id', rule.id);

    expect(vulnerabilities).toHaveLength(0);
  });
}); 